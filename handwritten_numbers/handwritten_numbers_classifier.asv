clear all
clc
close all

%% Initialization
% Constant values
num_classes = 10;

% Initialize data set
load('data/data_all.mat');

% Split data set into chunks of images
chunk_size = 1000;
training_set = split_to_chunks(trainv, 1, chunk_size);

%% Task 2a - NN-based classifier using the Euclidian distance
% Split dataset into chunks
chunk_size = 1000;
num_chunks = ceil(size(testv, 1) / chunk_size);

confusion_matrix = zeros(num_classes, num_classes);
total_error = 0;
total_samples = 0;

% Iterate over each chunk
for chunk = 1:num_chunks
    start_idx = (chunk - 1) * chunk_size + 1;
    end_idx = min(chunk * chunk_size, size(testv, 1));
    test_images = testv(start_idx:end_idx, :);
    test_labels = testlab(start_idx:end_idx);
    
    % Classify each test sample
    for i = 1:size(test_images, 1)
        distances = sqrt(sum((trainv - test_images(i, :)).^2, 2));
        [~, min_idx] = min(distances);
        predicted_label = trainlab(min_idx);

        % Update confusion matrix
        confusion_matrix(test_labels(i), predicted_label) = confusion_matrix(test_labels(i), predicted_label) + 1;
        
        % Update total error count
        if predicted_label ~= test_labels(i)
            total_error = total_error + 1;
        end
    end
    
    total_samples = total_samples + size(test_images, 1);
end

% Compute error rate
error_rate = total_error / total_samples;
disp(['Error rate: ' num2str(error_rate)]);

% Display confusion matrix
disp('Confusion matrix:');
disp(confusion_matrix);


%% Task 2b - Plotting
% x = zeros(28,28);
% x(:) = testv(1,:);
% image(x');
% 
% result = dist(trainv(15,:)', trainv(15,:));


%% FAST SOLUTION
% model = fitcknn(trainv,trainlab);
% i = randi([1,1000], 1);
% new_observation = testv(i,:);
% predicted_label = predict(model, new_observation);
% disp(predicted_label);